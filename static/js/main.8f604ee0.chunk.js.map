{"version":3,"sources":["components/PointEntry/style.module.css","components/PointEntry/index.js","App.js","components/DataGenerator/index.js","utils/train.js","utils/generate.js","reportWebVitals.js","index.js"],"names":["module","exports","PointEntry","data","setData","useState","x1","setX1","x2","setX2","label","setLabel","convertToInt","v","parseInt","isNaN","addDataPoint","curr","addDataPointKey","e","key","Table","className","style","map","i","x","y","Button","color","onClick","newData","splice","Input","value","onChange","target","onKeyPress","chart","DataGenerator","generate","isOpen","setIsOpen","ButtonDropdown","direction","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","zip","a","b","_","App","epoch","setEpoch","planePoints","setPlanePoints","w","Array","params","setParams","resetTraining","useEffect","negPoints","posPoints","push","ctx","document","getElementById","destroy","Chart","type","datasets","backgroundColor","pointRadius","borderColor","borderWidth","fill","tension","showLine","options","responsive","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","Container","Row","Col","JSON","stringify","width","height","id","dataType","nData","Math","random","theta","PI","cos","sin","generateData","w_d","reduce","acc","x_d","trainStep","separatorData","x2y","xs","minX","min","maxX","max","y2x","ys","minY","maxY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8f604ee0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scroll-table\":\"style_scroll-table__1fyfb\"};","import React, { useState } from 'react';\r\nimport { Table, Button, Input } from 'reactstrap';\r\nimport style from './style.module.css';\r\n\r\n/**\r\n * Tablulated data points\r\n * \r\n * @param {*} param0 \r\n */\r\nexport default function PointEntry({ data, setData }) {\r\n\r\n  const [x1, setX1] = useState(0);\r\n  const [x2, setX2] = useState(0);\r\n  const [label, setLabel] = useState(-1);\r\n\r\n  /**\r\n   * Converts value to int, returning 0 by default\r\n   * \r\n   * @param {*} v \r\n   */\r\n  const convertToInt = v => {\r\n    v = parseInt(v);\r\n    return isNaN(v) ? 0 : v;\r\n  }\r\n\r\n  /**\r\n   * Adds current data point to list of points\r\n   */\r\n  const addDataPoint = () => {\r\n    setData(curr => [...curr, [[convertToInt(x1), convertToInt(x2)], convertToInt(label)]]);\r\n  }\r\n\r\n  /**\r\n   * Adds data point from key press\r\n   * \r\n   * @param {*} e \r\n   */\r\n  const addDataPointKey = e => {\r\n    if (e.key === 'Enter') {\r\n      addDataPoint();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Table className={style['scroll-table']}>\r\n      <thead>\r\n        <tr>\r\n          <th>x1</th>\r\n          <th>x2</th>\r\n          <th>label</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          data.map(([x, y], i) => (\r\n            <tr key={i}>\r\n              <td>{x[0]}</td>\r\n              <td>{x[1]}</td>\r\n              <td>{y}</td>\r\n              <td><Button color=\"danger\" onClick={() => {\r\n                setData(curr => {\r\n                  const newData = [...curr];\r\n                  newData.splice(i, 1);\r\n                  return newData;\r\n                })\r\n              }}>Remove</Button></td>\r\n            </tr>\r\n          ))\r\n        }\r\n        <tr>\r\n          <td><Input value={x1} onChange={e => setX1(e.target.value)} onKeyPress={addDataPointKey} /></td>\r\n          <td><Input value={x2} onChange={e => setX2(e.target.value)} onKeyPress={addDataPointKey} /></td>\r\n          <td>\r\n            <select value={label} onChange={e => setLabel(e.target.value)} >\r\n              <option value={1}>+1</option>\r\n              <option value={-1}>-1</option>\r\n            </select>\r\n          </td>\r\n          <td><Button color=\"success\" onClick={addDataPoint}>Add</Button></td>\r\n        </tr>\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport Chart from 'chart.js';\nimport PointEntry from './components/PointEntry';\nimport DataGenerator from './components/DataGenerator';\nimport { trainStep } from './utils/train';\nimport { generateData } from './utils/generate';\n\nlet chart;\nconst nData = 50;\n\nexport default function App() {\n  const [data, setData] = useState([\n    [[1, 1], 1],\n    [[10, 1], -1],\n    [[1, 10], -1],\n  ]);\n  const [epoch, setEpoch] = useState(0);\n  const [planePoints, setPlanePoints] = useState([]);\n  const [params, setParams] = useState({ w: [...Array(2)].map(_ => 0), b: 0 }); // assume 2d data\n\n  /**\n   * Generates new data points based on inputted pattern and resets training\n   * \n   * @param {*} dataType \n   */\n  const generate = dataType => {\n    const newData = generateData(dataType, nData);\n    setData(newData);\n    resetTraining();\n  }\n\n  /**\n   * Resets training\n   */\n  const resetTraining = () => {\n    setPlanePoints([]);\n    setEpoch(0);\n    setParams({ w: [...Array(2)].map(_ => 0), b: 0 });\n  }\n\n  /**\n   * Updates graph when data points or separator params changed\n   */\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n\n    const negPoints = [];\n    const posPoints = [];\n    for (const [x, y] of data) {\n      switch (y) {\n        case -1:\n          negPoints.push({ x: x[0], y: x[1] });\n          break;\n        case 1:\n          posPoints.push({ x: x[0], y: x[1] });\n          break;\n      }\n    }\n\n    const ctx = document.getElementById(\"graph\");\n    if (chart) {\n      chart.destroy();\n    }\n    chart = new Chart(ctx, {\n      type: 'scatter',\n      data: {\n        datasets: [{\n          label: '+1',\n          data: posPoints,\n          backgroundColor: 'red',\n          pointRadius: 5,\n        },\n        {\n          label: '-1',\n          data: negPoints,\n          backgroundColor: 'blue',\n          pointRadius: 5,\n        },\n        {\n          label: 'separator',\n          data: planePoints,\n          borderColor: 'orange',\n          borderWidth: 3,\n          pointRadius: 0,\n          fill: false,\n          tension: 0,\n          showLine: true\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n  }, [data, planePoints]);\n\n  /**\n   * Trains and updates model for 1 epoch\n   */\n  const update = () => {\n\n    // Train and get new model params\n    const [w, b] = trainStep(data, [...params.w], params.b);\n    setParams({ w, b });\n\n    // Build new separator\n    let separatorData = [];\n    if (w[1] !== 0) {\n      const x2y = x => (-w[0] * x - b) / w[1];\n      const xs = data.map(([x, _]) => x[0]);\n      const minX = Math.min(...xs);\n      const maxX = Math.max(...xs);\n      separatorData = [{ x: minX, y: x2y(minX) }, { x: maxX, y: x2y(maxX) }];\n    } else if (w[1] === 0 && w[0] !== 0) {\n      const y2x = y => (-w[1] * y - b) / w[0];\n      const ys = data.map(([x, _]) => x[1]);\n      const minY = Math.min(...ys);\n      const maxY = Math.max(...ys);\n      separatorData = [{ x: y2x(minY), y: minY }, { x: y2x(maxY), y: maxY }];\n    }\n    setPlanePoints(separatorData);\n\n    // Increase epoch\n    setEpoch(epoch + 1);\n  }\n\n  return (\n    <Container>\n      <Row className=\"mb-4\">\n        <h1>Simple Perceptron Training Visualization</h1>\n      </Row>\n      <Row>\n        <Col>\n          <pre>Epoch: {epoch}</pre>\n          <pre>{JSON.stringify(params, null, 2)}</pre>\n\n          <div className=\"d-flex justify-content-center\">\n            <div style={{ width: '500px', height: '500px' }}>\n              <canvas id=\"graph\" width=\"500\" height=\"500\"></canvas>\n            </div>\n          </div>\n        </Col>\n        <Col>\n          <Row>\n            <Col>\n              <Row className=\"my-3\">\n                <div className=\"m-2\">\n                  <DataGenerator generate={generate} />\n                </div>\n                <Button color=\"danger\" className=\"m-2\" onClick={() => setData([])}>Clear Data</Button>\n              </Row>\n            </Col>\n            <Col>\n              <Row className=\"my-3\">\n                <Button color=\"danger\" className=\"m-2\" onClick={() => resetTraining()}>Reset Training</Button>\n                <Button color=\"primary\" className=\"m-2\" onClick={update}>Train!</Button>\n              </Row>\n            </Col>\n          </Row>\n\n          <PointEntry data={data} setData={setData} />\n        </Col>\n      </Row>\n    </Container >\n  );\n}","import React, { useState } from 'react';\r\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\n/**\r\n * Widget for controlling data point generation from template patterns\r\n * \r\n * @param {*} param0 \r\n */\r\nexport default function DataGenerator({ generate }) {\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  return (\r\n    <ButtonDropdown direction=\"down\" isOpen={isOpen} toggle={toggle}>\r\n      <DropdownToggle caret>\r\n        Generate Data\r\n      </DropdownToggle>\r\n      <DropdownMenu>\r\n        <DropdownItem onClick={() => generate('linear')}>Linear</DropdownItem>\r\n        <DropdownItem onClick={() => generate('circle')}>Circle</DropdownItem>\r\n        <DropdownItem onClick={() => generate('random')}>Random</DropdownItem>\r\n      </DropdownMenu>\r\n    </ButtonDropdown>\r\n  );\r\n}","\r\n/**\r\n * Zips arrays a and b into new array of form [a_i, b_i]\r\n * \r\n * @param {*} a \r\n * @param {*} b \r\n */\r\nfunction zip(a, b) {\r\n  return a.map((_, i) => [a[i], b[i]]);\r\n}\r\n\r\n/**\r\n * Trains one epoch using simple perceptron training\r\n * \r\n * @param {*} data Array of data points in form [[x_1, x_2, ..., x_n], y]\r\n * @param {*} w Model weight vector\r\n * @param {*} b Model bias\r\n */\r\nexport function trainStep(data, w, b) {\r\n\r\n  // Shuffle data\r\n  //data = [...data];\r\n  //data.sort(() => Math.random() - 0.5);\r\n\r\n  for (const [x, y] of data) {\r\n    const a = zip(w, x).map(([w_d, x_d]) => x_d * w_d)\r\n      .reduce((acc, x) => acc + x, b);\r\n\r\n    // Updates model on misclassification\r\n    if (y * a <= 0) {\r\n      w = zip(w, x).map(([w_d, x_d]) => w_d + y * x_d);\r\n      b = b + y;\r\n    }\r\n  }\r\n\r\n  return [w, b];\r\n}","/**\r\n * Generate data points from pattern type\r\n * \r\n * @param {String} type Type of data to generate\r\n * @param {Integer} nData Number of data points\r\n */\r\nexport function generateData(type, nData) {\r\n  switch (type) {\r\n    case 'linear':\r\n      return [...Array(nData)].map((_, i) => {\r\n        return i > nData / 2\r\n          ? [[Math.random() - 4, Math.random()], -1]\r\n          : [[Math.random() + 4, Math.random()], 1]\r\n      });\r\n    case 'circle':\r\n      return [...Array(nData)].map((_, i) => {\r\n        const theta = 2 * Math.PI * Math.random();\r\n        return i > nData / 2\r\n          ? [[Math.cos(theta), Math.sin(theta)], -1]\r\n          : [[2 * Math.cos(theta), 2 * Math.sin(theta)], 1]\r\n      });\r\n    case 'random':\r\n      return [...Array(nData)].map(() => [[Math.random(), Math.random()], Math.random() > 0.5 ? -1 : 1]);\r\n    default:\r\n      return [];\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}